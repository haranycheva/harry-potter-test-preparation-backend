{
  "openapi": "3.0.0",
  "info": {
    "title": "Test preparing service",
    "version": "0.3",
    "description": "Test preparing service database manages user profiles, topics and tests",
    "contact": {
      "name": "",
      "email": "",
      "url": ""
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [
    {
      "url": "https://harry-potter-test-preparation-backend.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Digest",
      "description": "Information from digest gets"
    },
    {
      "name": "Answer",
      "description": "Send user`s answers"
    },
    {
      "name": "Progresses",
      "description": "Progresses endpoints"
    },
    {
      "name": "AiChat",
      "description": "AiChat endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password invalid!",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized/User not found",
            "content": {}
          }
        }
      }
    },
    "/auth/getInfo": {
      "get": {
        "tags": ["User"],
        "summary": "User get all info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "getInfo's object",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized/User not found",
            "content": {}
          }
        }
      }
    },
    "/auth/": {
      "put": {
        "tags": ["User"],
        "summary": "User change info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "changeInfo's object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "400": {
            "description": "Password or email can't be changed",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/topic/": {
      "get": {
        "tags": ["Digest"],
        "summary": "Get all topics",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/topic/{id}": {
      "get": {
        "tags": ["Digest"],
        "summary": "Get topic by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the topic",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/topic/task/{id}": {
      "get": {
        "tags": ["Digest"],
        "summary": "Get task by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/topic/tasks/{topicId}": {
      "get": {
        "tags": ["Digest"],
        "summary": "Get tasks information for a topic",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "description": "ID of the topic",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Topic or tasks not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/topic/test/{id}": {
      "get": {
        "tags": ["Digest"],
        "summary": "Get test tasks by topic id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the test",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Test or tasks not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/answers/": {
      "post": {
        "tags": ["Answer"],
        "summary": "Send user`s answer for some task",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Answer's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTaskAnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTaskAnswerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Topic or tasks not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/answers/{topicId}": {
      "post": {
        "tags": ["Answer"],
        "security": [{ "Bearer": [] }],
        "summary": "Submit Test Answers",
        "description": "Processes user-submitted answers for a test, calculates the score, and returns the result.",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "description": "The ID of the topic associated with the test.",
            "schema": {
              "type": "string",
              "example": "6778234615b1d06324cd3605"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestAnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully processed answers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestAnswerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ai-chat/": {
      "get": {
        "tags": ["AiChat"],
        "summary": "Get user`s ai chat",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createChatResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Can not find ai chat for this user",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["AiChat"],
        "summary": "Create user`s ai chat",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createChatResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Can not find ai chat for this user",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["AiChat"],
        "summary": "Send message to ai and get response",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendMessageToAiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Can not find ai chat for this user",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["AiChat"],
        "summary": "delete ai chat",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAiChatResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized/User not found",
            "content": {}
          },
          "404": {
            "description": "Ai chat for this user not found"
          }
        }
      }
    },
    "/progress/test/{topicId}": {
      "get": {
        "tags": ["Progresses"],
        "security": [{ "Bearer": [] }],
        "summary": "Get test progress for a specific topic",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the topic for which progress is requested",
              "example": "63f8249b15c1a3d0567890ab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test progress data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestProgressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/progress/task/{taskId}": {
      "get": {
        "tags": ["Progresses"],
        "security": [{ "Bearer": [] }],
        "summary": "Get task progress for a specific task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the task for which progress is requested",
              "example": "63f8249b15c1a3d0567890ab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task progress data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskProgressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/progress/topic/{topicId}": {
      "get": {
        "tags": ["Progresses"],
        "security": [{ "Bearer": [] }],
        "summary": "Get topic progress for a specific topic",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the topic for which progress is requested",
              "example": "63f8249b15c1a3d0567890ab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Topic progress data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicProgressResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password", "firstName", "lastName"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "firstName": {
            "type": "string",
            "description": "User's name",
            "example": "Pavlo"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "example": "Dziga"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MWNmZTZjYzk2MzlhYzNmODEyMGY0YiIsImlhdCI6MTcyOTk1MzM4OSwiZXhwIjoxNzMwMDM2MTg5fQ.nBL9aA-aU_Necx6BHXNfk-ORsEAlU4L99H5CZyxjqvo"
          },
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's ID",
                "example": "671cfe6cc9639ac3f8120f4b"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "user@gmail.com",
                "format": "email"
              },
              "firstName": {
                "type": "string",
                "description": "User's name",
                "example": "Pavlo"
              },
              "lastName": {
                "type": "string",
                "description": "User's last name",
                "example": "Dziga"
              },
              "avatar": {
                "type": "string",
                "description": "Avatar image link",
                "example": "https://res.cloudinary.com/dk3syrsg5/image/upload/v1731665163/zno-preparing-user/photo_2024-11-15_12-05-23_wrbes3.jpg"
              },
              "progress": {
                "type": "number",
                "description": "persent of tasks that user did",
                "example": 0
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "User's logout",
            "example": "Logout success!"
          }
        }
      },
      "GetInfoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's ID",
            "example": "671cfe6cc9639ac3f8120f4b"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "user@gmail.com",
            "format": "email"
          },
          "firstName": {
            "type": "string",
            "description": "User's name",
            "example": "Pavlo"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "example": "Dziga"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar image link",
            "example": "https://res.cloudinary.com/dk3syrsg5/image/upload/v1731665163/zno-preparing-user/photo_2024-11-15_12-05-23_wrbes3.jpg"
          },
          "progress": {
            "type": "number",
            "description": "persent of tasks that user did",
            "example": 50
          }
        }
      },
      "EditUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's name",
            "example": "Baby Shark"
          },
          "lastName": {
            "type": "string",
            "description": "User's name",
            "example": "Baby Shark"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar"
          }
        }
      },
      "Topic": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the topic",
            "example": "64b7c7f9a19f4b2c5d8c1a9d"
          },
          "name": {
            "type": "string",
            "description": "Name of the topic",
            "example": "Mathematics"
          },
          "number": {
            "type": "integer",
            "description": "Sequential number or order of the topic",
            "minimum": 1,
            "example": 1
          },
          "totalTasks": {
            "type": "integer",
            "description": "Total number of tasks in the topic",
            "minimum": 0,
            "example": 20
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the topic",
            "example": "64b7c7f9a19f4b2c5d8c1a9d"
          },
          "condition": {
            "type": "string",
            "description": "The problem or question the user must solve",
            "example": "Один з операторів комп’ютерного набору може набрати певний рукопис, працюючи самостійно, за 30 днів, а інший – за 60 днів. За скільки днів виконають набір рукопису оператори, працюючи разом?"
          },
          "caption": {
            "type": "string",
            "description": "Hint or instruction for the user",
            "example": "Введіть просто число"
          },
          "possibleScore": {
            "type": "integer",
            "description": "Maximum score achievable for the task",
            "example": 3
          },
          "type": {
            "type": "string",
            "description": "The type of task",
            "enum": ["match", "input"],
            "example": "input"
          },
          "answer": {
            "type": "string",
            "description": "The correct answer to the task",
            "example": "20"
          }
        }
      },
      "SendTaskAnswerRequest": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the task",
            "example": "6778364c6c758b0318d14efb"
          },
          "type": {
            "type": "string",
            "description": "Type of the task",
            "example": "match"
          },
          "answer": {
            "type": "array",
            "description": "List of conditions and answers for the task",
            "items": {
              "type": "object",
              "properties": {
                "condition": {
                  "type": "string",
                  "description": "ID of the condition",
                  "example": "677837366c758b0318d14efe"
                },
                "answer": {
                  "type": "string",
                  "description": "Hashed answer for the condition",
                  "example": "$2a$10$OnFhImTY.yGbi7.2ekUvgeCywyuGt135XNmBBB1UyA4zJb0wddZCu"
                }
              }
            }
          }
        }
      },
      "SendTaskAnswerResponse": {
        "type": "object",
        "properties": {
          "taskResults": {
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "description": "User's score for the task",
                "example": 0
              },
              "userAnswers": {
                "type": "array",
                "description": "List of user's answers with correctness",
                "items": {
                  "type": "object",
                  "properties": {
                    "condition": {
                      "type": "string",
                      "description": "ID of the condition or question",
                      "example": "677837366c758b0318d14efe"
                    },
                    "answer": {
                      "type": "string",
                      "description": "Hashed user answer",
                      "example": "$2a$10$OnFhImTY.yGbi7.2ekUvgeCywyuGt135XNmBBB1UyA4zJb0wddZCu"
                    },
                    "isCorrect": {
                      "type": "boolean",
                      "description": "Indicates if the answer is correct",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "maxScore": {
            "type": "integer",
            "description": "Maximum score possible for the task",
            "example": 0
          }
        }
      },
      "TestAnswerRequest": {
        "type": "object",
        "properties": {
          "userAnswers": {
            "type": "array",
            "description": "An array of user-submitted answers.",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          }
        },
        "required": ["userAnswers"]
      },
      "UserAnswer": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the task.",
            "example": "677837366c758b0318d14efe"
          },
          "selectedOptionId": {
            "type": "string",
            "description": "The ID of the selected option (optional for answer-based tasks).",
            "example": "6778219f15b1d06324cd35cc"
          }
        },
        "required": ["_id", "selectedOptionId"]
      },
      "TestAnswerResponse": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "description": "The user's score for the test.",
            "example": 6
          },
          "userAnswers": {
            "type": "array",
            "description": "List of user answers with correctness information.",
            "items": {
              "$ref": "#/components/schemas/CheckedUserAnswer"
            }
          },
          "maxScore": {
            "type": "integer",
            "description": "The highest score achieved by the user for the test.",
            "example": 9
          },
          "completed": {
            "type": "boolean",
            "description": "Indicates if the test is completed (score >= 90% of possibleScore).",
            "example": false
          },
          "possibleScore": {
            "type": "integer",
            "description": "The total possible score for the test.",
            "example": 18
          }
        },
        "required": [
          "score",
          "userAnswers",
          "maxScore",
          "completed",
          "possibleScore"
        ]
      },
      "CheckedUserAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "description": "The user's submitted answer (optional for selectedOptionId-based tasks).",
            "example": "300"
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Indicates if the user's answer is correct.",
            "example": false
          }
        },
        "required": ["isCorrect"]
      },
      "sendMessageToAiResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "message text",
            "example": "Of course I can help you! What's the question"
          },
          "role": {
            "type": "string",
            "enum": ["assistant", "user"],
            "description": "who sent the message",
            "example": "assistant"
          }
        }
      },
      "createChatResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sendMessageToAiResponse"
            }
          },
          "owner": {
            "type": "string",
            "description": "Owner's unique ID",
            "example": "64b7c7f9a19f4b2c5d8c1a9d"
          },
          "_id": {
            "type": "string",
            "description": "Unique identifier for the advert",
            "example": "64b7c7f9a19f4b2c5d8c1a9d"
          }
        }
      },
      "DeleteAiChatResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "chat is deleted",
            "example": "success"
          }
        }
      },
      "TestProgressResponse": {
        "type": "object",
        "properties": {
          "maxScore": {
            "type": "integer",
            "description": "The maximum score for the test",
            "example": 100
          },
          "owner": {
            "type": "string",
            "description": "ID of the user who owns the test progress",
            "example": "63f8249b15c1a3d0567890cd"
          },
          "topic": {
            "type": "string",
            "description": "ID of the topic related to the test progress",
            "example": "63f8249b15c1a3d0567890ab"
          }
        }
      },
      "TaskProgressResponse": {
        "type": "object",
        "properties": {
          "maxScore": {
            "type": "integer",
            "description": "The maximum score for the task",
            "example": 100
          },
          "wasCompleted": {
            "type": "boolean",
            "description": "Indicates whether the task was completed",
            "example": false
          },
          "owner": {
            "type": "string",
            "description": "ID of the user who owns the task progress",
            "example": "63f8249b15c1a3d0567890cd"
          },
          "task": {
            "type": "string",
            "description": "ID of the related task",
            "example": "63f8249b15c1a3d0567890ab"
          }
        }
      },
      "TopicProgressResponse": {
        "type": "object",
        "properties": {
          "completedTasks": {
            "type": "integer",
            "description": "Number of completed tasks within the topic",
            "example": 5
          },
          "owner": {
            "type": "string",
            "description": "ID of the user who owns the topic progress",
            "example": "63f8249b15c1a3d0567890cd"
          },
          "topic": {
            "type": "string",
            "description": "ID of the related topic",
            "example": "63f8249b15c1a3d0567890ab"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
